// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mimabook.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mimabook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mimabook {
class mimacodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<mimacode> {
} _mimacode_default_instance_;
class myprivatebookDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<myprivatebook> {
} _myprivatebook_default_instance_;

namespace protobuf_mimabook_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mimacode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mimacode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mimacode, app_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mimacode, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mimacode, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mimacode, password_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myprivatebook, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myprivatebook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myprivatebook, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myprivatebook, userpass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(myprivatebook, mimainfo_),
  0,
  1,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(mimacode)},
  { 12, 19, sizeof(myprivatebook)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_mimacode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_myprivatebook_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mimabook.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _mimacode_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _myprivatebook_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _mimacode_default_instance_.DefaultConstruct();
  _myprivatebook_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016mimabook.proto\022\010mimabook\"I\n\010mimacode\022\013"
      "\n\003app\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\020\n\010priority\030\003 "
      "\001(\005\022\020\n\010password\030\004 \002(\t\"Y\n\rmyprivatebook\022\020"
      "\n\010username\030\001 \002(\t\022\020\n\010userpass\030\002 \002(\t\022$\n\010mi"
      "mainfo\030\003 \003(\0132\022.mimabook.mimacode"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mimabook.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mimabook_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mimacode::kAppFieldNumber;
const int mimacode::kNameFieldNumber;
const int mimacode::kPriorityFieldNumber;
const int mimacode::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mimacode::mimacode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mimabook_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mimabook.mimacode)
}
mimacode::mimacode(const mimacode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app()) {
    app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:mimabook.mimacode)
}

void mimacode::SharedCtor() {
  _cached_size_ = 0;
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
}

mimacode::~mimacode() {
  // @@protoc_insertion_point(destructor:mimabook.mimacode)
  SharedDtor();
}

void mimacode::SharedDtor() {
  app_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mimacode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mimacode::descriptor() {
  protobuf_mimabook_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mimabook_2eproto::file_level_metadata[0].descriptor;
}

const mimacode& mimacode::default_instance() {
  protobuf_mimabook_2eproto::InitDefaults();
  return *internal_default_instance();
}

mimacode* mimacode::New(::google::protobuf::Arena* arena) const {
  mimacode* n = new mimacode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mimacode::Clear() {
// @@protoc_insertion_point(message_clear_start:mimabook.mimacode)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_app()) {
      GOOGLE_DCHECK(!app_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*app_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
  }
  priority_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mimacode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mimabook.mimacode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app().data(), this->app().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mimabook.mimacode.app");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mimabook.mimacode.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 priority = 3;
      case 3: {
        if (tag == 24u) {
          set_has_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string password = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mimabook.mimacode.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mimabook.mimacode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mimabook.mimacode)
  return false;
#undef DO_
}

void mimacode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mimabook.mimacode)
  // required string app = 1;
  if (has_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app().data(), this->app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimabook.mimacode.app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimabook.mimacode.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 priority = 3;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimabook.mimacode.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mimabook.mimacode)
}

::google::protobuf::uint8* mimacode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mimabook.mimacode)
  // required string app = 1;
  if (has_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app().data(), this->app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimabook.mimacode.app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimabook.mimacode.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 priority = 3;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->priority(), target);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimabook.mimacode.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mimabook.mimacode)
  return target;
}

size_t mimacode::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mimabook.mimacode)
  size_t total_size = 0;

  if (has_app()) {
    // required string app = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_password()) {
    // required string password = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  return total_size;
}
size_t mimacode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mimabook.mimacode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string app = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string password = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 priority = 3;
  if (has_priority()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mimacode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mimabook.mimacode)
  GOOGLE_DCHECK_NE(&from, this);
  const mimacode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mimacode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mimabook.mimacode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mimabook.mimacode)
    MergeFrom(*source);
  }
}

void mimacode::MergeFrom(const mimacode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mimabook.mimacode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_app()) {
      set_has_app();
      app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
}

void mimacode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mimabook.mimacode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mimacode::CopyFrom(const mimacode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mimabook.mimacode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mimacode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void mimacode::Swap(mimacode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mimacode::InternalSwap(mimacode* other) {
  app_.Swap(&other->app_);
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  std::swap(priority_, other->priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mimacode::GetMetadata() const {
  protobuf_mimabook_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mimabook_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mimacode

// required string app = 1;
bool mimacode::has_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mimacode::set_has_app() {
  _has_bits_[0] |= 0x00000001u;
}
void mimacode::clear_has_app() {
  _has_bits_[0] &= ~0x00000001u;
}
void mimacode::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app();
}
const ::std::string& mimacode::app() const {
  // @@protoc_insertion_point(field_get:mimabook.mimacode.app)
  return app_.GetNoArena();
}
void mimacode::set_app(const ::std::string& value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mimabook.mimacode.app)
}
#if LANG_CXX11
void mimacode::set_app(::std::string&& value) {
  set_has_app();
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mimabook.mimacode.app)
}
#endif
void mimacode::set_app(const char* value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mimabook.mimacode.app)
}
void mimacode::set_app(const char* value, size_t size) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mimabook.mimacode.app)
}
::std::string* mimacode::mutable_app() {
  set_has_app();
  // @@protoc_insertion_point(field_mutable:mimabook.mimacode.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mimacode::release_app() {
  // @@protoc_insertion_point(field_release:mimabook.mimacode.app)
  clear_has_app();
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mimacode::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    set_has_app();
  } else {
    clear_has_app();
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:mimabook.mimacode.app)
}

// required string name = 2;
bool mimacode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mimacode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void mimacode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void mimacode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& mimacode::name() const {
  // @@protoc_insertion_point(field_get:mimabook.mimacode.name)
  return name_.GetNoArena();
}
void mimacode::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mimabook.mimacode.name)
}
#if LANG_CXX11
void mimacode::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mimabook.mimacode.name)
}
#endif
void mimacode::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mimabook.mimacode.name)
}
void mimacode::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mimabook.mimacode.name)
}
::std::string* mimacode::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:mimabook.mimacode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mimacode::release_name() {
  // @@protoc_insertion_point(field_release:mimabook.mimacode.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mimacode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mimabook.mimacode.name)
}

// optional int32 priority = 3;
bool mimacode::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void mimacode::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
void mimacode::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
void mimacode::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
::google::protobuf::int32 mimacode::priority() const {
  // @@protoc_insertion_point(field_get:mimabook.mimacode.priority)
  return priority_;
}
void mimacode::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:mimabook.mimacode.priority)
}

// required string password = 4;
bool mimacode::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void mimacode::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
void mimacode::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
void mimacode::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& mimacode::password() const {
  // @@protoc_insertion_point(field_get:mimabook.mimacode.password)
  return password_.GetNoArena();
}
void mimacode::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mimabook.mimacode.password)
}
#if LANG_CXX11
void mimacode::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mimabook.mimacode.password)
}
#endif
void mimacode::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mimabook.mimacode.password)
}
void mimacode::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mimabook.mimacode.password)
}
::std::string* mimacode::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:mimabook.mimacode.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mimacode::release_password() {
  // @@protoc_insertion_point(field_release:mimabook.mimacode.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mimacode::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mimabook.mimacode.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int myprivatebook::kUsernameFieldNumber;
const int myprivatebook::kUserpassFieldNumber;
const int myprivatebook::kMimainfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

myprivatebook::myprivatebook()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mimabook_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mimabook.myprivatebook)
}
myprivatebook::myprivatebook(const myprivatebook& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mimainfo_(from.mimainfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userpass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userpass()) {
    userpass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpass_);
  }
  // @@protoc_insertion_point(copy_constructor:mimabook.myprivatebook)
}

void myprivatebook::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

myprivatebook::~myprivatebook() {
  // @@protoc_insertion_point(destructor:mimabook.myprivatebook)
  SharedDtor();
}

void myprivatebook::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void myprivatebook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* myprivatebook::descriptor() {
  protobuf_mimabook_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mimabook_2eproto::file_level_metadata[1].descriptor;
}

const myprivatebook& myprivatebook::default_instance() {
  protobuf_mimabook_2eproto::InitDefaults();
  return *internal_default_instance();
}

myprivatebook* myprivatebook::New(::google::protobuf::Arena* arena) const {
  myprivatebook* n = new myprivatebook;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void myprivatebook::Clear() {
// @@protoc_insertion_point(message_clear_start:mimabook.myprivatebook)
  mimainfo_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_userpass()) {
      GOOGLE_DCHECK(!userpass_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userpass_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool myprivatebook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mimabook.myprivatebook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mimabook.myprivatebook.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userpass = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpass().data(), this->userpass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mimabook.myprivatebook.userpass");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mimabook.mimacode mimainfo = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mimainfo()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mimabook.myprivatebook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mimabook.myprivatebook)
  return false;
#undef DO_
}

void myprivatebook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mimabook.myprivatebook)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimabook.myprivatebook.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string userpass = 2;
  if (has_userpass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpass().data(), this->userpass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimabook.myprivatebook.userpass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userpass(), output);
  }

  // repeated .mimabook.mimacode mimainfo = 3;
  for (unsigned int i = 0, n = this->mimainfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mimainfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mimabook.myprivatebook)
}

::google::protobuf::uint8* myprivatebook::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mimabook.myprivatebook)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimabook.myprivatebook.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string userpass = 2;
  if (has_userpass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpass().data(), this->userpass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mimabook.myprivatebook.userpass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userpass(), target);
  }

  // repeated .mimabook.mimacode mimainfo = 3;
  for (unsigned int i = 0, n = this->mimainfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mimainfo(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mimabook.myprivatebook)
  return target;
}

size_t myprivatebook::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mimabook.myprivatebook)
  size_t total_size = 0;

  if (has_username()) {
    // required string username = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_userpass()) {
    // required string userpass = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpass());
  }

  return total_size;
}
size_t myprivatebook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mimabook.myprivatebook)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string username = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string userpass = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpass());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .mimabook.mimacode mimainfo = 3;
  {
    unsigned int count = this->mimainfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mimainfo(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void myprivatebook::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mimabook.myprivatebook)
  GOOGLE_DCHECK_NE(&from, this);
  const myprivatebook* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const myprivatebook>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mimabook.myprivatebook)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mimabook.myprivatebook)
    MergeFrom(*source);
  }
}

void myprivatebook::MergeFrom(const myprivatebook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mimabook.myprivatebook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mimainfo_.MergeFrom(from.mimainfo_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_userpass()) {
      set_has_userpass();
      userpass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpass_);
    }
  }
}

void myprivatebook::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mimabook.myprivatebook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void myprivatebook::CopyFrom(const myprivatebook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mimabook.myprivatebook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool myprivatebook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mimainfo())) return false;
  return true;
}

void myprivatebook::Swap(myprivatebook* other) {
  if (other == this) return;
  InternalSwap(other);
}
void myprivatebook::InternalSwap(myprivatebook* other) {
  mimainfo_.UnsafeArenaSwap(&other->mimainfo_);
  username_.Swap(&other->username_);
  userpass_.Swap(&other->userpass_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata myprivatebook::GetMetadata() const {
  protobuf_mimabook_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mimabook_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// myprivatebook

// required string username = 1;
bool myprivatebook::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void myprivatebook::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void myprivatebook::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void myprivatebook::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& myprivatebook::username() const {
  // @@protoc_insertion_point(field_get:mimabook.myprivatebook.username)
  return username_.GetNoArena();
}
void myprivatebook::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mimabook.myprivatebook.username)
}
#if LANG_CXX11
void myprivatebook::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mimabook.myprivatebook.username)
}
#endif
void myprivatebook::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mimabook.myprivatebook.username)
}
void myprivatebook::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mimabook.myprivatebook.username)
}
::std::string* myprivatebook::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:mimabook.myprivatebook.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* myprivatebook::release_username() {
  // @@protoc_insertion_point(field_release:mimabook.myprivatebook.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void myprivatebook::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:mimabook.myprivatebook.username)
}

// required string userpass = 2;
bool myprivatebook::has_userpass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void myprivatebook::set_has_userpass() {
  _has_bits_[0] |= 0x00000002u;
}
void myprivatebook::clear_has_userpass() {
  _has_bits_[0] &= ~0x00000002u;
}
void myprivatebook::clear_userpass() {
  userpass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpass();
}
const ::std::string& myprivatebook::userpass() const {
  // @@protoc_insertion_point(field_get:mimabook.myprivatebook.userpass)
  return userpass_.GetNoArena();
}
void myprivatebook::set_userpass(const ::std::string& value) {
  set_has_userpass();
  userpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mimabook.myprivatebook.userpass)
}
#if LANG_CXX11
void myprivatebook::set_userpass(::std::string&& value) {
  set_has_userpass();
  userpass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mimabook.myprivatebook.userpass)
}
#endif
void myprivatebook::set_userpass(const char* value) {
  set_has_userpass();
  userpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mimabook.myprivatebook.userpass)
}
void myprivatebook::set_userpass(const char* value, size_t size) {
  set_has_userpass();
  userpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mimabook.myprivatebook.userpass)
}
::std::string* myprivatebook::mutable_userpass() {
  set_has_userpass();
  // @@protoc_insertion_point(field_mutable:mimabook.myprivatebook.userpass)
  return userpass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* myprivatebook::release_userpass() {
  // @@protoc_insertion_point(field_release:mimabook.myprivatebook.userpass)
  clear_has_userpass();
  return userpass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void myprivatebook::set_allocated_userpass(::std::string* userpass) {
  if (userpass != NULL) {
    set_has_userpass();
  } else {
    clear_has_userpass();
  }
  userpass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpass);
  // @@protoc_insertion_point(field_set_allocated:mimabook.myprivatebook.userpass)
}

// repeated .mimabook.mimacode mimainfo = 3;
int myprivatebook::mimainfo_size() const {
  return mimainfo_.size();
}
void myprivatebook::clear_mimainfo() {
  mimainfo_.Clear();
}
const ::mimabook::mimacode& myprivatebook::mimainfo(int index) const {
  // @@protoc_insertion_point(field_get:mimabook.myprivatebook.mimainfo)
  return mimainfo_.Get(index);
}
::mimabook::mimacode* myprivatebook::mutable_mimainfo(int index) {
  // @@protoc_insertion_point(field_mutable:mimabook.myprivatebook.mimainfo)
  return mimainfo_.Mutable(index);
}
::mimabook::mimacode* myprivatebook::add_mimainfo() {
  // @@protoc_insertion_point(field_add:mimabook.myprivatebook.mimainfo)
  return mimainfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::mimabook::mimacode >*
myprivatebook::mutable_mimainfo() {
  // @@protoc_insertion_point(field_mutable_list:mimabook.myprivatebook.mimainfo)
  return &mimainfo_;
}
const ::google::protobuf::RepeatedPtrField< ::mimabook::mimacode >&
myprivatebook::mimainfo() const {
  // @@protoc_insertion_point(field_list:mimabook.myprivatebook.mimainfo)
  return mimainfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mimabook

// @@protoc_insertion_point(global_scope)
