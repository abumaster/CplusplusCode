// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mimabook.proto

#ifndef PROTOBUF_mimabook_2eproto__INCLUDED
#define PROTOBUF_mimabook_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace mimabook {
class mimacode;
class mimacodeDefaultTypeInternal;
extern mimacodeDefaultTypeInternal _mimacode_default_instance_;
class myprivatebook;
class myprivatebookDefaultTypeInternal;
extern myprivatebookDefaultTypeInternal _myprivatebook_default_instance_;
}  // namespace mimabook

namespace mimabook {

namespace protobuf_mimabook_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mimabook_2eproto

// ===================================================================

class mimacode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mimabook.mimacode) */ {
 public:
  mimacode();
  virtual ~mimacode();

  mimacode(const mimacode& from);

  inline mimacode& operator=(const mimacode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mimacode& default_instance();

  static inline const mimacode* internal_default_instance() {
    return reinterpret_cast<const mimacode*>(
               &_mimacode_default_instance_);
  }

  void Swap(mimacode* other);

  // implements Message ----------------------------------------------

  inline mimacode* New() const PROTOBUF_FINAL { return New(NULL); }

  mimacode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const mimacode& from);
  void MergeFrom(const mimacode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(mimacode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string app = 1;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 1;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional int32 priority = 3;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 3;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mimabook.mimacode)
 private:
  void set_has_app();
  void clear_has_app();
  void set_has_name();
  void clear_has_name();
  void set_has_priority();
  void clear_has_priority();
  void set_has_password();
  void clear_has_password();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 priority_;
  friend struct  protobuf_mimabook_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class myprivatebook : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mimabook.myprivatebook) */ {
 public:
  myprivatebook();
  virtual ~myprivatebook();

  myprivatebook(const myprivatebook& from);

  inline myprivatebook& operator=(const myprivatebook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const myprivatebook& default_instance();

  static inline const myprivatebook* internal_default_instance() {
    return reinterpret_cast<const myprivatebook*>(
               &_myprivatebook_default_instance_);
  }

  void Swap(myprivatebook* other);

  // implements Message ----------------------------------------------

  inline myprivatebook* New() const PROTOBUF_FINAL { return New(NULL); }

  myprivatebook* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const myprivatebook& from);
  void MergeFrom(const myprivatebook& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(myprivatebook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mimabook.mimacode mimainfo = 3;
  int mimainfo_size() const;
  void clear_mimainfo();
  static const int kMimainfoFieldNumber = 3;
  const ::mimabook::mimacode& mimainfo(int index) const;
  ::mimabook::mimacode* mutable_mimainfo(int index);
  ::mimabook::mimacode* add_mimainfo();
  ::google::protobuf::RepeatedPtrField< ::mimabook::mimacode >*
      mutable_mimainfo();
  const ::google::protobuf::RepeatedPtrField< ::mimabook::mimacode >&
      mimainfo() const;

  // required string username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string userpass = 2;
  bool has_userpass() const;
  void clear_userpass();
  static const int kUserpassFieldNumber = 2;
  const ::std::string& userpass() const;
  void set_userpass(const ::std::string& value);
  #if LANG_CXX11
  void set_userpass(::std::string&& value);
  #endif
  void set_userpass(const char* value);
  void set_userpass(const char* value, size_t size);
  ::std::string* mutable_userpass();
  ::std::string* release_userpass();
  void set_allocated_userpass(::std::string* userpass);

  // @@protoc_insertion_point(class_scope:mimabook.myprivatebook)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_userpass();
  void clear_has_userpass();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mimabook::mimacode > mimainfo_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr userpass_;
  friend struct  protobuf_mimabook_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// mimacode

// required string app = 1;
inline bool mimacode::has_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mimacode::set_has_app() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mimacode::clear_has_app() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mimacode::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app();
}
inline const ::std::string& mimacode::app() const {
  // @@protoc_insertion_point(field_get:mimabook.mimacode.app)
  return app_.GetNoArena();
}
inline void mimacode::set_app(const ::std::string& value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mimabook.mimacode.app)
}
#if LANG_CXX11
inline void mimacode::set_app(::std::string&& value) {
  set_has_app();
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mimabook.mimacode.app)
}
#endif
inline void mimacode::set_app(const char* value) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mimabook.mimacode.app)
}
inline void mimacode::set_app(const char* value, size_t size) {
  set_has_app();
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mimabook.mimacode.app)
}
inline ::std::string* mimacode::mutable_app() {
  set_has_app();
  // @@protoc_insertion_point(field_mutable:mimabook.mimacode.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mimacode::release_app() {
  // @@protoc_insertion_point(field_release:mimabook.mimacode.app)
  clear_has_app();
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mimacode::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    set_has_app();
  } else {
    clear_has_app();
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:mimabook.mimacode.app)
}

// required string name = 2;
inline bool mimacode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mimacode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mimacode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mimacode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& mimacode::name() const {
  // @@protoc_insertion_point(field_get:mimabook.mimacode.name)
  return name_.GetNoArena();
}
inline void mimacode::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mimabook.mimacode.name)
}
#if LANG_CXX11
inline void mimacode::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mimabook.mimacode.name)
}
#endif
inline void mimacode::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mimabook.mimacode.name)
}
inline void mimacode::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mimabook.mimacode.name)
}
inline ::std::string* mimacode::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:mimabook.mimacode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mimacode::release_name() {
  // @@protoc_insertion_point(field_release:mimabook.mimacode.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mimacode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mimabook.mimacode.name)
}

// optional int32 priority = 3;
inline bool mimacode::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mimacode::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mimacode::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mimacode::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 mimacode::priority() const {
  // @@protoc_insertion_point(field_get:mimabook.mimacode.priority)
  return priority_;
}
inline void mimacode::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:mimabook.mimacode.priority)
}

// required string password = 4;
inline bool mimacode::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mimacode::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mimacode::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mimacode::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& mimacode::password() const {
  // @@protoc_insertion_point(field_get:mimabook.mimacode.password)
  return password_.GetNoArena();
}
inline void mimacode::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mimabook.mimacode.password)
}
#if LANG_CXX11
inline void mimacode::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mimabook.mimacode.password)
}
#endif
inline void mimacode::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mimabook.mimacode.password)
}
inline void mimacode::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mimabook.mimacode.password)
}
inline ::std::string* mimacode::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:mimabook.mimacode.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mimacode::release_password() {
  // @@protoc_insertion_point(field_release:mimabook.mimacode.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mimacode::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mimabook.mimacode.password)
}

// -------------------------------------------------------------------

// myprivatebook

// required string username = 1;
inline bool myprivatebook::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void myprivatebook::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void myprivatebook::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void myprivatebook::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& myprivatebook::username() const {
  // @@protoc_insertion_point(field_get:mimabook.myprivatebook.username)
  return username_.GetNoArena();
}
inline void myprivatebook::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mimabook.myprivatebook.username)
}
#if LANG_CXX11
inline void myprivatebook::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mimabook.myprivatebook.username)
}
#endif
inline void myprivatebook::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mimabook.myprivatebook.username)
}
inline void myprivatebook::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mimabook.myprivatebook.username)
}
inline ::std::string* myprivatebook::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:mimabook.myprivatebook.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* myprivatebook::release_username() {
  // @@protoc_insertion_point(field_release:mimabook.myprivatebook.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void myprivatebook::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:mimabook.myprivatebook.username)
}

// required string userpass = 2;
inline bool myprivatebook::has_userpass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void myprivatebook::set_has_userpass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void myprivatebook::clear_has_userpass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void myprivatebook::clear_userpass() {
  userpass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpass();
}
inline const ::std::string& myprivatebook::userpass() const {
  // @@protoc_insertion_point(field_get:mimabook.myprivatebook.userpass)
  return userpass_.GetNoArena();
}
inline void myprivatebook::set_userpass(const ::std::string& value) {
  set_has_userpass();
  userpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mimabook.myprivatebook.userpass)
}
#if LANG_CXX11
inline void myprivatebook::set_userpass(::std::string&& value) {
  set_has_userpass();
  userpass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mimabook.myprivatebook.userpass)
}
#endif
inline void myprivatebook::set_userpass(const char* value) {
  set_has_userpass();
  userpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mimabook.myprivatebook.userpass)
}
inline void myprivatebook::set_userpass(const char* value, size_t size) {
  set_has_userpass();
  userpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mimabook.myprivatebook.userpass)
}
inline ::std::string* myprivatebook::mutable_userpass() {
  set_has_userpass();
  // @@protoc_insertion_point(field_mutable:mimabook.myprivatebook.userpass)
  return userpass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* myprivatebook::release_userpass() {
  // @@protoc_insertion_point(field_release:mimabook.myprivatebook.userpass)
  clear_has_userpass();
  return userpass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void myprivatebook::set_allocated_userpass(::std::string* userpass) {
  if (userpass != NULL) {
    set_has_userpass();
  } else {
    clear_has_userpass();
  }
  userpass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpass);
  // @@protoc_insertion_point(field_set_allocated:mimabook.myprivatebook.userpass)
}

// repeated .mimabook.mimacode mimainfo = 3;
inline int myprivatebook::mimainfo_size() const {
  return mimainfo_.size();
}
inline void myprivatebook::clear_mimainfo() {
  mimainfo_.Clear();
}
inline const ::mimabook::mimacode& myprivatebook::mimainfo(int index) const {
  // @@protoc_insertion_point(field_get:mimabook.myprivatebook.mimainfo)
  return mimainfo_.Get(index);
}
inline ::mimabook::mimacode* myprivatebook::mutable_mimainfo(int index) {
  // @@protoc_insertion_point(field_mutable:mimabook.myprivatebook.mimainfo)
  return mimainfo_.Mutable(index);
}
inline ::mimabook::mimacode* myprivatebook::add_mimainfo() {
  // @@protoc_insertion_point(field_add:mimabook.myprivatebook.mimainfo)
  return mimainfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mimabook::mimacode >*
myprivatebook::mutable_mimainfo() {
  // @@protoc_insertion_point(field_mutable_list:mimabook.myprivatebook.mimainfo)
  return &mimainfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mimabook::mimacode >&
myprivatebook::mimainfo() const {
  // @@protoc_insertion_point(field_list:mimabook.myprivatebook.mimainfo)
  return mimainfo_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace mimabook

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mimabook_2eproto__INCLUDED
